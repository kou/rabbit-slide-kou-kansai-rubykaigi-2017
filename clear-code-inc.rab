= 株式会社クリアコード

: author
   須藤功平
: content-source
   関西Ruby会議2017
: date
   2017-05-27
: allotted-time
   60m
: theme
   clear-code

= 内容

  * ストーリーはあまりない
  * テーマに関係する話を集めた
  * 聞いた人それぞれで参考になる\n
    なにかを見つけてくれると\n
    いいな

= テーマ

コミュニティー\n
と\n
ビジネス

= 題材

  # image
  # src = images/clear-code.svg
  # relative_width = 100
  # reflect_ratio = 0.5

== スライドプロパティー

: enable-title-on-image
   false

= クリアコード

  * 設立11年目の会社
  * 業務：受託開発と技術サポート
  * 小さな会社：9人(('note:（募集してはいる）'))

= 大事にしていること

(('tag:center'))
(('tag:large'))
フリーソフトウェアの推進

(('tag:center'))
と

(('tag:center'))
(('tag:large'))
稼ぐこと

(('tag:center'))
の

(('tag:center'))
(('tag:x-large'))
両立

= 推進するだけだとダメ

  * 稼がないと継続できない
  * そうなると推進し続けられない

= 稼ぐだけだとダメ

  * クリアコードをやっている\n
    意味がない
  * 他の開発会社でよい

= 両立の実現に向けて

  * クリアコードが活用するもの
    * フリーソフトウェア開発で学んだ事\n
      (('note:理念：https://www.clear-code.com/philosophy/'))
  * コミュニティーで学んだことを\n
    ビジネスに活かしている\n
    (('note:関西Ruby会議2017のテーマにあっていそう！'))

= 学んだこと1

(('tag:center'))
問題を見つけたらupstreamで直す

  * (('wait'))使用ライブラリーに問題発見！\n
    (('note:（たとえばRailsとかActiveなんとかとか）'))\n
    あなたならどうする！？

    (1) 手元で回避
    (2) 別のライブラリーを探す
    (3) そのライブラリーを直す

= クリアコードのスタイル

  * そのライブラリーを直す
    * 自分のコードをメンテしやすくなる
      * 回避コードを手元でメンテしなくてよい
      * そのライブラリーを使っているコードが\n
        複数あったら全部で回避しないといけない…
    * 他の人も困らなくなる

= フリーソフトウェア開発の世界

  * そのライブラリーを直すのは\n
    当たり前
    * フリーソフトウェアが大事にしていることの1つは「直せること」！
  * クリアコードはここで学んだ\n
    ことを実践しているだけ

= クリアコードの実践

  * コミュニティーの知見を\n
    ビジネスで活用
    * 「メンテしやすい」は割に合う
  * ビジネスの知見を\n
    コミュニティーに\n
    フィードバック
    * ユースケースを元に改良

= クリアコードでの実例

  * Rubyにメモリーリークあり
    * Ruby製のデーモンで問題に
    * 調査→パッチ作成→Ruby本体で修正
    * 定期的に再起動という回避策もあるだろうけど、本体で修正

(('note:これで社員がコミット権をもらっていた'))

(('note:技術的な詳細：デバッグ力: よく知らないプログラムの直し方'))\n
(('note:http://www.clear-code.com/blog/2011/12/6.html'))

= 学んだこと2

(('tag:center'))
開発を続けられるコードを書く

  * (('wait'))ファーストリリース完了！\n
    その後は？
    (1) 納品して終わり
    (2) 運用チームに引き渡して終わり
    (3) 継続的に開発

= クリアコードのスタイル

  * 継続的に開発
    * 長期的に一緒にやれる仕事を優先
    * フリーソフトウェア開発では\n
      リリースを重ねながら改良が普通
    * ビジネス的にもうれしい：安定収入

= フリーソフトウェア開発の世界

  * 継続的に開発は普通
    * ユーザーのフィードバックも参考に\n
      よりよいソフトウェアを開発
  * クリアコードはここで学んだ\n
    ことを実践しているだけ

= 学んだこと3

(('tag:center'))
相手が想像しなくてもわかるように説明する

= 学んだこと4

(('tag:center'))
楽しく開発する

= 学んだこと

  * ...

= 仕事

  * 受託開発
  * OSS開発支援

= 受託開発

  * 優先度
    * 成果をフリーソフトウェアにできる仕事
    * フリーソフトウェアを活用できる仕事
    * いずれ活用につながりそうな仕事

= OSS開発支援

  * お客さんのOSSの開発に参加
    * 例1：Fluentd関連
    * 例2：Groonga(('note:（今は自主的に開発）'))
  * お客さんのOSS開発を支援
    * 例：Speeeさん

= お客さんのOSSの開発に参加

ダイレクトに大事なことを両立

(('tag:margin-top * 2'))
クリアコードの大事なこと：

  * フリーソフトウェアの推進
  * 稼ぐこと

= どうして仕事になるか

  * OSSで稼いでいる企業が増えた
  * ちゃんとOSSを開発できることを\n
    OSSを開発することで示せている
    * OSSの開発が営業活動になっている
    * コミュニティー活動がビジネスへ

= お客さんのOSS開発を支援

ダイレクトに大事なことを両立

(('tag:margin-top * 2'))
クリアコードの大事なこと：

  * フリーソフトウェアの推進
  * 稼ぐこと

= どうして仕事になるか

  * OSSの活用が当たり前になった
  * OSSのエコシステムに参加する\n
    メリットが認知されつつある
  * 支援してくれそう感が出ている
    * OSSの開発や発表などが営業活動
    * コミュニティー活動がビジネスへ

= OSSのエコシステムに参加

どういうこと\n
だろう？

= OSSのエコシステムに参加

  # blockquote

  自分たちのソフトウェアと\n
  OSSを同じように扱う

  (('tag:right'))
  (('note:私の言葉での説明'))

= 同じように扱う

  * 問題があれば直す
  * 気になるところがあれば共有

(('wait'))
(('tag:center'))
いつも通りでいい！\n
OSSは身近だということを伝える

= 仕事の作り方

お客さんに\n
見つけてもらう

= お客さん探しを頑張らない

# クリアコードがやっていることはニッチなのでマッチするお客さんは少ない。

# 少ないお客さんを探し回るパワーはない。（そこに力を入れるよりもフリーソフトウェア開発で培った開発力だったり調査力だったり得意なところをもっと頑張りたい。）

# なので探すことは諦めて見つけてもらうことを頑張っている。
# 具体的になにをしているかと言うと
# 積極的に情報を公開する。
# 否定型で言うと
# 情報を隠さない。
# 情報を公開するというのはブログに書くと言うのもそうだし、こういうイベントで話すというのもそう。もちろんフリーソフトウェアの開発だってそう。思いついたアイディアをコードにして情報公開だったり、公式ドキュメントに書くこともそうだし、バグレポートやパッチにコメントして知見を伝えることだってそう。

# Mozillaのバグトラッキングシステムで見たからとかコミットを見たからと問い合わせてもらったケースがある。

# そうやってフリーソフトウェアを推進すること自体がお客さんに見つけてもらうことにつながる。フリーソフトウェアの推進を頑張ることで稼ぐことにもつながる。フリーソフトウェア推進と稼ぐの両立の一つの形。

# （コミュニティー活動がビジネスにもつながる？）

# 採用も同じやり方。フリーソフトウェアを推進する活動を公開することでクリアコードが合いそうな人に見つけてもらう。あるいは、フリーソフトウェアを推進する活動を社外の人と一緒にする中でよさそうな人を誘う。

